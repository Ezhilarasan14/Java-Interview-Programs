Problem 1

---------------------------------------------------------------------------------------------------------------
Prison Labor Dodgers
====================

Commander Lambda is all about efficiency, including using her bunny prisoners for manual labor. 
But no one's been properly monitoring the labor shifts for a while, and they've gotten quite mixed up. 

You've been given the task of fixing them, but after you wrote up new shifts, you realized that some 

prisoners had been transferred to a different block and aren't available for their assigned shifts. 

And manually sorting through each shift list to compare against prisoner block lists will take forever - 

remember, Commander Lambda loves efficiency!

Given two almost identical lists of prisoner IDs x and y where one of the lists contains an additional ID, 

write a function answer(x, y) that compares the lists and returns the additional ID.

For example, given the lists x = [13, 5, 6, 2, 5] and y = [5, 2, 5, 13], the function answer(x, y) would 

return 6 because the list x contains the integer 6 and the list y doesn't. 

Given the lists x = [14, 27, 1, 4, 2, 50, 3, 1] and y = [2, 4, -4, 3, 1, 1, 14, 27, 50], 

the function answer(x, y) would return -4 because the list y contains the integer -4 and the list x doesn't.

In each test case, the lists x and y will always contain n non-unique integers where n is at least 1 

but never more than 99, and one of the lists will contain an additional unique integer which 

should be returned by the function.  The same n non-unique integers will be present on both lists, 

but they might appear in a different order, like in the examples above. Commander Lambda likes to keep 

her numbers short, so every prisoner ID will be between -1000 and 1000.

Languages
=========

To provide a Python solution, edit solution.py
To provide a Java solution, edit solution.java

Test cases
==========

Inputs:
    (int list) x = [13, 5, 6, 2, 5]
    (int list) y = [5, 2, 5, 13]
Output:
    (int) 6

Inputs:
    (int list) x = [14, 27, 1, 4, 2, 50, 3, 1]
    (int list) y = [2, 4, -4, 3, 1, 1, 14, 27, 50]
Output:
    (int) -4
	
	
	
--------------------------------------------------------------------------------------------
public static int answer(int[] a, int[] b){
		int diff = 0;
	    for (int i = 0; i < a.length; i++) {
	        diff ^= a[i];
	    }
	    for (int i = 0; i < b.length; i++) {
	        diff ^= b[i];
	    }
	    return diff;
	}
	
Explanation:

Inputs:
    (int list) x = [13, 5, 6, 2, 5]
    (int list) y = [5, 2, 5, 13]
Output:

	for (int i = 0; i < a.length; i++) {
	        ret ^= a[i];
	    }
		
		ret = ret^a[i];
		i=0 -- ret=0 --  a[i]=12 so ret = 12
		i=1 -- ret=12 -- a[i]=5  so ret = 8
		i=2 -- ret=8 --  a[i]=6  so ret = 14
		i=3 -- ret=14 -- a[i]=2  so ret = 12
		i=4 -- ret=12 -- a[i]=5  so ret = 9
		
	for (int i = 0; i < b.length; i++) {
	        ret ^= b[i];
	}
	
		ret = ret^b[i];
		i=0 -- ret=9 --  b[i]=5 so ret = 12
		i=1 -- ret=12 -- b[i]=2  so ret = 14
		i=2 -- ret=14 --  b[i]=5  so ret = 11
		i=3 -- ret=11 -- b[i]=13  so ret = 6
		
------------------------------------------------------------------------------------------------------------

Solution.java
----------------------------------------------------------------------------------------------------------

package com.google.challenges;


public class Answer1 {
	
	public static int answer(int[] a, int[] b){
		int diff = 0;
	    for (int i = 0; i < a.length; i++) {
	        diff ^= a[i];
	    }
	    for (int i = 0; i < b.length; i++) {
	        diff ^= b[i];
	    }
	    return diff;
	}

	public static void main(String[] args) {
		int[] x = {13, 5, 6, 2, 5};
		int[] y = {5, 2, 5, 13};
		
		//int[] x = {14, 27, 1, 4, 2, 50, 3, 1};
		//int[] y = {2, 4, -4, 3, 1, 1, 14, 27, 50};
		
		
		
		System.out.println(answer(x, y));
	}

}

-----------------------------------------------------------------------------------------------------------------
















Problem 2

---------------------------------------------------------------------------------------------------

Please Pass the Coded Messages
==============================

You need to pass a message to the bunny prisoners, but to avoid detection, the code you agreed to use is... 
obscure, to say the least. The bunnies are given food on standard-issue prison plates that are stamped 
with the numbers 0-9 for easier sorting, and you need to combine sets of plates to create the numbers 
in the code. The signal that a number is part of the code is that it is divisible by 3. 

You can do smaller numbers like 15 and 45 easily, but bigger numbers like 144 and 414 
are a little trickier. Write a program to help yourself quickly create large numbers for 
use in the code, given a limited number of plates to work with.

You have L, a list containing some digits (0 to 9). 
Write a function answer(L) which finds the largest number that can be made 
from some or all of these digits and is divisible by 3. If it is not possible 
to make such a number, return 0 as the answer. L will contain anywhere from 1 to 9 digits.  
The same digit may appear multiple times in the list, but each element in the list may only be used once.

Languages
=========

To provide a Python solution, edit solution.py
To provide a Java solution, edit solution.java

Test cases
==========

Inputs:
    (int list) l = [3, 1, 4, 1]
Output:
    (int) 4311

Inputs:
    (int list) l = [3, 1, 4, 1, 5, 9]
Output:
    (int) 94311

---------------------------------------------------------------------------------------------------

Solution.java

---------------------------------------------------------------------------------------------------
package com.google.challenges;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class NumberGen {
	
	public static void main(String[] args) {
		//int[] l = {3, 1, 4, 1, 5, 9};
		int[] l = {3, 1, 4, 1};
		//int[] l = {7, 1, 2, 5};
		
		System.out.println(answer(l));
	}
	
	@SuppressWarnings("rawtypes")
	public static int answer(int[] l){
		
		Arrays.sort(l);
		
		for(int i=0;i<l.length/2;i++) {
		 
		     int temp1 = l[i];
		     l[i] = l[l.length-(i+1)];
		     l[l.length-(i+1)] = temp1;
		}
		
		/*System.out.println("Printing array l");
		for(int i=0;i<l.length; i++)
	    System.out.print(l[i]+" ");*/
		
		
		List<Integer> s = new ArrayList<Integer>();
	    for (Integer integer : l) {
			s.add(integer);
		}
		
	    int setSize = s.size();
	    int finalValue = (int) (Math.pow(2, setSize));
	    String bValue = "";
	    String temp1="";
	    List list = new ArrayList();
	    
	    for (int i = 1; i < finalValue; i++) {
	        bValue = Integer.toBinaryString(i);
	        int bValueSize = bValue.length();
	        
	        for (int k = 0; k < (setSize - bValueSize); k++) {
	            bValue = "0" + bValue;
	        }
	        

	        for (int j = 0; j < setSize; j++) {
	            if (bValue.charAt(j) == '1') {
	                temp1=temp1+s.get(j);
	            }
	        }
	        
	        if(Integer.parseInt(temp1)%3 == 0){
	        	list.add(Integer.parseInt(temp1));
	        }
	        temp1="";
	    }
	   
	    /*
	   System.out.println("Printing divisble by 3 list");
        for (Object obj : list) {
			System.out.println(obj);
		}
        
        System.out.println("max "+Collections.max(list));*/
	    if(list.size() == 0){
	    	return 0;
	    }else{
	    	return (int) Collections.max(list);
	    }	
	}
}
----------------------------------------------------------------------------------------------------






Problem 3 (lvl2 part2)

----------------------------------------------------------------------------------------------------
Don't Get Volunteered!
======================

As a henchman on Commander Lambda's space station, you're expected to be resourceful, 
smart, and a quick thinker. It's not easy building a doomsday device and capturing 
bunnies at the same time, after all! In order to make sure that everyone working for 
her is sufficiently quick-witted, Commander Lambda has installed new flooring outside 
the henchman dormitories. It looks like a chessboard, and every morning and evening 
you have to solve a new movement puzzle in order to cross the floor. That would be 
fine if you got to be the rook or the queen, but instead, you have to be the knight.
 Worse, if you take too much time solving the puzzle, you get "volunteered" as a test
 subject for the LAMBCHOP doomsday device!

To help yourself get to and from your bunk every day, write a function called 
answer(src, dest) which takes in two parameters: the source square, on which you start, 
and the destination square, which is where you need to land to solve the puzzle.  
The function should return an integer representing the smallest number of moves it 
will take for you to travel from the source square to the destination square using 
a chess knight's moves (that is, two squares in any direction immediately followed 
by one square perpendicular to that direction, or vice versa, in an "L" shape).  
Both the source and destination squares will be an integer between 0 and 63, 
inclusive, and are numbered like the example chessboard below:

-------------------------
| 0| 1| 2| 3| 4| 5| 6| 7|
-------------------------
| 8| 9|10|11|12|13|14|15|
-------------------------
|16|17|18|19|20|21|22|23|
-------------------------
|24|25|26|27|28|29|30|31|
-------------------------
|32|33|34|35|36|37|38|39|
-------------------------
|40|41|42|43|44|45|46|47|
-------------------------
|48|49|50|51|52|53|54|55|
-------------------------
|56|57|58|59|60|61|62|63|
-------------------------

Languages
=========

To provide a Python solution, edit solution.py
To provide a Java solution, edit solution.java

Test cases
==========

Inputs:
    (int) src = 19
    (int) dest = 36
Output:
    (int) 1

Inputs:
    (int) src = 0
    (int) dest = 1
Output:
    (int) 3
---------------------------------------------------------------------------------------------------


Solution.java

--------------------------------------------------------------------------------------------------
package com.google.challenges;


import java.util.LinkedList;
import java.util.Queue;

public class Answer3 {
	
	private static final int BLANK = -1;
	private static int rowLen;
	private static int colLen;
	private int[][] board;
	private static Queue<Coordinate> queue;

	public static void main(String[] args) {
			
		
		
		System.out.println(moveKnight(19, 36));
		System.out.println(moveKnight(0, 0));
		System.out.println(moveKnight(36, 50));

	}
	
	public static int moveKnight(int src, int dest){
		if(src == 0 && dest == 0 ){
			return 0;
		}else if(src == dest){
			return 0;
		} 
		else if (src-dest == 15|| src-dest == -15|| src-dest == 17|| src-dest == -17|| src-dest == -10||
				src-dest == -10||src-dest == 6||src-dest == -6){
			return 1;
		} else{
			int[][] board = 
				  { { -1, -1, -1, -1, -1, -1, -1, -1 },
					{ -1, -1, -1, -1, -1, -1, -1, -1 },
					{ -1, -1, -1, -1, -1, -1, -1, -1 },
					{ -1, -1, -1, -1, -1, -1, -1, -1 },

					{ -1, -1, -1, -1, -1, -1, -1, -1 },
					{ -1, -1, -1, -1, -1, -1, -1, -1 },
					{ -1, -1, -1, -1, -1, -1, -1, -1 },
					{ -1, -1, -1, -1, -1, -1, -1, -1 } };

			rowLen = board.length;
			colLen = board[0].length;
			//int hops=	path(board, 0, 0,rowLen -1 ,colLen -1 );
			
			
			//Generating the Actual board
			int [][] actualBoard = new int[8][8];
			int value=0;
			
			for(int i=0; i<8; i++){
				for(int j=0; j<8; j++){
					actualBoard[i][j] = value;
					value++;
				}
			}
		
			int startX = -1, startY = -1, endX = -1, endY = -1;
			for(int i=0; i<8; i++){
				for(int j=0; j<8; j++){
					if(src == actualBoard[i][j]){
						startX=i;
						startY=j;
					}else if(dest == actualBoard[i][j]) {
						endX=i;
						endY=j;
					}
				}
			}
			
			int hops = path(board, startX, startY, endX, endY );
			return hops;
		}
	}
	
	public static int path(int[][] board, int startRow, int startCol, int endRow, int endCol) {
		queue = new LinkedList<Coordinate>();
		queue.add(new Coordinate(startRow, startCol));
		queue.add(null);  //this acts a delimiter
		board[startRow][startCol] = 0;
		int hops=0;

		while (!queue.isEmpty()) {
			Coordinate popedItem = queue.poll();

			if (popedItem == null) {
				hops++;
				queue.offer(null);
				continue;
			} 
			
				int r = popedItem.row;
				int c = popedItem.col;

				board[r][c] = hops;
				
				if(r==endRow && c==endCol)
				{
					return hops;
				}

				Coordinate[] points = validCoordinates(board, r, c);

				for (Coordinate o : points) {
					if (o != null)
						queue.add(o);
				}
		}
		return -1;
	}

	private static boolean isValid(int[][] board, int row, int col) {
		if (row >= 0 && row < colLen && col >= 0 && col < rowLen
				&& board[row][col] == BLANK)
			return true;
		return false;
	}

	public static Coordinate[] validCoordinates(int[][] board, int row, int col) {
		Coordinate[] points = new Coordinate[8];

		if (isValid(board, row + 2, col + 1))
			points[0] = new Coordinate(row + 2, col + 1);

		if (isValid(board, row + 1, col + 2))
			points[1] = new Coordinate(row + 1, col + 2);

		if (isValid(board, row - 1, col + 2))
			points[2] = new Coordinate(row - 1, col + 2);

		if (isValid(board, row - 2, col + 1))
			points[3] = new Coordinate(row - 2, col + 1);

		if (isValid(board, row - 2, col - 1))
			points[4] = new Coordinate(row - 2, col - 1);

		if (isValid(board, row - 1, col - 2))
			points[5] = new Coordinate(row - 1, col - 2);

		if (isValid(board, row + 1, col - 2))
			points[6] = new Coordinate(row + 1, col - 2);

		if (isValid(board, row + 2, col - 1))
			points[7] = new Coordinate(row + 2, col - 1);

		return points;
	}
}

class Coordinate implements Comparable<Coordinate> {

	public int row;
	public int col;
	public int level;

	public Coordinate() {
		row = 0;
		col = 0;
	}

	public Coordinate(int row, int col) {
		this.row = row;
		this.col = col;
		this.level = level;

	}
	@Override
	public int compareTo(Coordinate that) {
		return this.row - that.row - this.col - that.col;
	}
}

--------------------------------------------------------------------------------------------------




Problem 4 (Lvl 3 Part 1)

--------------------------------------------------------------------------------------------------
Queue To Do
===========

You're almost ready to make your move to destroy the LAMBCHOP doomsday device, 
but the security checkpoints that guard the underlying systems of the LAMBCHOP 
are going to be a problem. You were able to take one down without tripping any alarms, 
which is great! Except that as Commander Lambda's assistant, you've learned that the 
checkpoints are about to come under automated review, which means that your sabotage 
will be discovered and your cover blown - unless you can trick the automated review system.

To trick the system, you'll need to write a program to return the same security checksum 
that the guards would have after they would have checked all the workers through. Fortunately, 
Commander Lambda's desire for efficiency won't allow for hours-long lines, so the checkpoint 
guards have found ways to quicken the pass-through rate. Instead of checking each and every 
worker coming through, the guards instead go over everyone in line while noting their security IDs, 
then allow the line to fill back up. Once they've done that they go over the line again, this time
 leaving off the last worker. They continue doing this, leaving off one more worker from the line 
 each time but recording the security IDs of those they do check, until they skip the entire line,
 at which point they XOR the IDs of all the workers they noted into a checksum and then take off for
 lunch. Fortunately, the workers' orderly nature causes them to always line up in numerical order 
 without any gaps.

For example, if the first worker in line has ID 0 and the security checkpoint line holds three workers,
 the process would look like this:
0 1 2 /
3 4 / 5
6 / 7 8
where the guards' XOR (^) checksum is 0^1^2^3^4^6 == 2.

Likewise, if the first worker has ID 17 and the checkpoint holds four workers, the process would look like:
17 18 19 20 /
21 22 23 / 24
25 26 / 27 28
29 / 30 31 32
which produces the checksum 17^18^19^20^21^22^23^25^26^29 == 14.

All worker IDs (including the first worker) are between 0 and 2000000000 inclusive, and the 
checkpoint line will always be at least 1 worker long.

With this information, write a function answer(start, length) that will cover for the missing 
security checkpoint by outputting the same checksum the guards would normally submit before lunch. 
You have just enough time to find out the ID of the first worker to be checked (start) and the 
length of the line (length) before the automatic review occurs, so your program must generate
 the proper checksum with just those two values.

Languages
=========

To provide a Python solution, edit solution.py
To provide a Java solution, edit solution.java

Test cases
==========

Inputs:
    (int) start = 0
    (int) length = 3
Output:
    (int) 2

Inputs:
    (int) start = 17
    (int) length = 4
Output:
    (int) 14




------------------------------------------------------------------------------------------------------------------------------
Solution.java
--------------------------------------------------------------------------------------------------

package com.google.challenges;

public class Answer4 {

public static void main(String[] args) {
		
		System.out.println(answer(17,4));
		System.out.println(answer3(17,4));
		System.out.println(answer3(2000000000,20000));
		System.out.println(answer(2000000000,20000));
		//System.out.println(answer(2000000,20000));
		
	}
	
	//Not fast enough uses bruteforce
	public static int answer(int start, int length) { 	
		int flag1 = length;
		int flag2 = length;
		int count = 0;
		int xorChecksum = 0;
		for (int i = 0; i < flag1; i++) {
			xorChecksum ^= start;
			//System.out.println(start+" "+xorChecksum);
			start++;
			
			//Next iteration, increasing size of list
			if(flag2 != 0 && i == flag1-1){
				flag2 = flag2 - 1;
				flag1 += flag2;
				count++;
				
				//skipping elements using count var
				if(count>1){
					start = start + (count-1);
				}
			}
		}
		if(xorChecksum<0){
			return 0;
		}else
        return xorChecksum;
    }  
	
	//Superfast uses xor of xor of rows to calculate final ans
	public static int answer3(int start, int length){
		int l = length;
		int checksum = 0;
		while( l > 0){
			l = l - 1;
			checksum ^= getXor(start, start + l);
			start += length;
		}
        return checksum;
	}

	public static int getXor(int a, int b) {
		return findXORofRange(a, b);
	}
	
	public static int findXORofRange(int m, int n) {
	    int[] patternTracker;

	    if(m % 2 == 0)
	        patternTracker = new int[] {n, 1, n^1, 0};
	    else
	        patternTracker = new int[] {m, m^n, m-1, (m-1)^n};

	    return patternTracker[(n-m) % 4];
	}
}

-------------------------------------------------------------------------------------------------------------------------------



Problem 5 (Level 3 Part 2)
-------------------------------------------------------------------------------------------------------------------------------

Doomsday Fuel
=============

Making fuel for the LAMBCHOP's reactor core is a tricky process because of the exotic matter involved. 
It starts as raw ore, then during processing, begins randomly changing between forms, eventually 
reaching a stable form. There may be multiple stable forms that a sample could ultimately reach, 
not all of which are useful as fuel. 

Commander Lambda has tasked you to help the scientists increase fuel creation efficiency by 
predicting the end state of a given ore sample. You have carefully studied the different structures 
that the ore can take and which transitions it undergoes. It appears that, while random, 
the probability of each structure transforming is fixed. That is, each time the ore is 
in 1 state, it has the same probabilities of entering the next state (which might be the same state).  
You have recorded the observed transitions in a matrix. The others in the lab have hypothesized 
more exotic forms that the ore can become, but you haven't seen all of them.

Write a function answer(m) that takes an array of array of nonnegative ints representing 
how many times that state has gone to the next state and return an array of ints for each 
terminal state giving the exact probabilities of each terminal state, represented as the 
numerator for each state, then the denominator for all of them at the end and in simplest form. 
The matrix is at most 10 by 10. It is guaranteed that no matter which state the ore is in,
 there is a path from that state to a terminal state. That is, the processing will always 
 eventually end in a stable state. The ore starts in state 0. The denominator will fit within a 
 signed 32-bit integer during the calculation, as long as the fraction is simplified regularly. 

For example, consider the matrix m:
[
  [0,1,0,0,0,1],  # s0, the initial state, goes to s1 and s5 with equal probability
  [4,0,0,3,2,0],  # s1 can become s0, s3, or s4, but with different probabilities
  [0,0,0,0,0,0],  # s2 is terminal, and unreachable (never observed in practice)
  [0,0,0,0,0,0],  # s3 is terminal
  [0,0,0,0,0,0],  # s4 is terminal
  [0,0,0,0,0,0],  # s5 is terminal
]
So, we can consider different paths to terminal states, such as:
s0 -> s1 -> s3
s0 -> s1 -> s0 -> s1 -> s0 -> s1 -> s4
s0 -> s1 -> s0 -> s5
Tracing the probabilities of each, we find that
s2 has probability 0
s3 has probability 3/14
s4 has probability 1/7
s5 has probability 9/14
So, putting that together, and making a common denominator, gives an answer in the form of
[s2.numerator, s3.numerator, s4.numerator, s5.numerator, denominator] which is
[0, 3, 2, 9, 14].

Languages
=========

To provide a Python solution, edit solution.py
To provide a Java solution, edit solution.java

Test cases
==========

Inputs:
    (int) m = [[0, 2, 1, 0, 0], [0, 0, 0, 3, 4], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]
Output:
    (int list) [7, 6, 8, 21]

Inputs:
    (int) m = [[0, 1, 0, 0, 0, 1], [4, 0, 0, 3, 2, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]]
Output:
    (int list) [0, 3, 2, 9, 14]


-------------------------------------------------------------------------------------------------------------------------------
Solution.java
-------------------------------------------------------------------------------------------------------------------------------

package com.google.challenges;

import java.util.ArrayList;
import java.util.Arrays;

public class Answer5 {
	public static void main(String[] args) {
        // TODO Auto-generated method stub
        // int m[][] = {
        // { 0, 1, 1, 0, 0, 1, 0, 0, 1, 1 },
        // { 4, 0, 0, 3, 2, 0, 3, 0, 4, 0 },
        // { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 },
        // { 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 },
        // { 1, 0, 0, 5, 0, 0, 7, 0, 0, 0 },
        // { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        // { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        // { 0, 4, 0, 0, 0, 0, 0, 0, 0, 0 },
        // { 5, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        // };

         int m1[][] = {
         {0,2,1,0,0},
         {0,0,0,3,4},
         {0,0,0,0,0},
         {0,0,0,0,0},
         {0,0,0,0,0}
         };
         
        /* int m3[][] = {{0, 1, 0, 0, 0, 0}, 
        		 {0, 0, 1,  0, 0, 1}, 
        		 {0, 0, 0, 0, 0, 0}, 
        		 {0, 0, 0, 0, 0, 0}, 
        		 {0, 0, 0, 0, 0, 0}, 
        		 {0, 0, 0, 0, 0, 0}};*/
        		 

        /*int m2[][] = {
                {0,40},
                {0,0}               
             {0,0,0}
        };*/

        int[] output = answer(m1);
        System.out.println(Arrays.toString(output));
    }

    public static int[] answer(int[][] m) { 
    	if(m.length == 1){
    		int[] arr={1,1};
    		return arr;
    	}
    	else{
    		double[][] orignal = generateNewArray(m);
            int denominaterCount = 0;
            ArrayList<Integer> nonEndedList = new ArrayList<Integer>();
            ArrayList<Integer> endedList = new ArrayList<Integer>();
            int[] deno = new int[m.length];

            //Loop to determine which arrays are nonterminating & which are terminating
            for (int row = 0; row < m.length; row++) {
                int sum = 0;
                for (int column = 0; column < m[0].length; column++) {
                    sum += m[row][column];
                }
                if(row == 0 && sum == 0){
                    return new int[1];
                }
                if (sum > 0) {
                    nonEndedList.add(row);
                    deno[denominaterCount++] = sum;
                } else {
                    endedList.add(row);
                }
            }

            //Creates Q & I array with size of nonterminatedlist
            double[][] subractArr1 = new double[nonEndedList.size()][nonEndedList.size()];
            double[][] subractArr2 = new double[nonEndedList.size()][nonEndedList.size()];
            for (int i = 0; i < nonEndedList.size(); i++) {
                for (int j = 0; j < nonEndedList.size(); j++) {
                    double temp = orignal[nonEndedList.get(i)][nonEndedList.get(j)];
                    subractArr1[i][j] = temp/(double)deno[i];              
                    if(i == j)
                        subractArr2[i][j] = 1;
                    else
                        subractArr2[i][j] = 0;
                }
            }

            Matrix tempSubractArr1 = new Matrix(subractArr1);
            Matrix tempSubractArr2 = new Matrix(subractArr2);
            Matrix tempResultArr = MatrixOperations.subtract(tempSubractArr2, tempSubractArr1);

            Matrix inverseResArr = MatrixOperations.inverse(tempResultArr);
           
            double[][] multiplyArr2 = new double[nonEndedList.size()][endedList.size()];

            for(int i = 0; i < nonEndedList.size(); i++){
                for(int j = 0; j < endedList.size(); j++){
                    multiplyArr2[i][j] = orignal[nonEndedList.get(i)][endedList.get(j)]/deno[i];
                }
            }

            Matrix tempMultiplyArr2 = new Matrix(multiplyArr2);
            Matrix multiplyResArr = MatrixOperations.multiply(inverseResArr, tempMultiplyArr2);

            double[][] fractionArr = multiplyResArr.getValues(); 

            int[] finalNumeratorArr = new int[endedList.size()];
            int[] finalDenominatorArr = new int[endedList.size()];

            for(int i = 0; i < endedList.size(); i++){

                int[] fractionValue = convertDecimalToFraction(fractionArr[0][i]);
                finalNumeratorArr[i] = fractionValue[0];
                finalDenominatorArr[i] = fractionValue[1];
            }

            int lcm = lcm(finalDenominatorArr);
            int[] resultArr = new int[endedList.size()+1];
            resultArr[endedList.size()] = lcm;
            for(int i = 0; i<endedList.size(); i++){
                int temp = lcm/finalDenominatorArr[i];
                resultArr[i] = finalNumeratorArr[i] * temp; 
            }

            return resultArr;
    	}
    		
        
    }
    
    //Creates a double array from exisiting int array
    private static double[][] generateNewArray(int[][] m) {
        double[][] orignal = new double[m.length][m[0].length];
        for (int row = 0; row < m.length; row++) {          
            for (int column = 0; column < m[0].length; column++) {              
                orignal[row][column] = (double)m[row][column];
            }           
        }
        return orignal;
    }

    static private int[] convertDecimalToFraction(double x) {
        if (x < 0.0){
            return convertDecimalToFraction(-x);
        }
        double tolerance = 1.0E-6;
        double h1=1; double h2=0;
        double k1=0; double k2=1;
        double b = x;
        do {
            double a = Math.floor(b);
            double aux = h1; h1 = a*h1+h2; h2 = aux;
            aux = k1; k1 = a*k1+k2; k2 = aux;
            b = 1/(b-a);
        } while (Math.abs(x-h1/k1) > x*tolerance);

        int[] fraction = new int[2];
        fraction[0] = (int)h1;
        fraction[1] = (int)k1;
        return fraction;
    }

    //Called by LCM(int, int) to calc GCD of int & int to calc LCM
    private static int gcd(int a, int b) {
        while (b > 0)
        {
            int temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }

    //Calculates LCM of given array
    private static int lcm(int[] input) {
        int result = input[0];
        for(int i = 1; i < input.length; i++) 
        	result = result * (input[i] / gcd(result, input[i]));
        
        return result;
    }

}

class Matrix {

    private int rows;
    private int column;
    private double[][] data;

    public Matrix(double[][] data) {
        this.data = data;
        this.rows = data.length;
        this.column = data[0].length;
    }

    public Matrix(int row, int col) {
        this.rows = row;
        this.column = col;
        data = new double[row][col];
    }

    public int getRows() {
        return rows;
    }

    public void setRows(int nrows) {
        this.rows = nrows;
    }

    public int getColumn() {
        return column;
    }

    public void setColumn(int col) {
        this.column = col;
    }

    public double[][] getValues() {
        return data;
    }

    public void setValues(double[][] values) {
        this.data = values;
    }

    public void setValueAt(int row, int col, double value) {
        data[row][col] = value;
    }

    public double getValueAt(int row, int col) {
        return data[row][col];
    }

    public boolean isSquare() {
        return rows == column;
    }

    public int size() {
        if (isSquare())
            return rows;
        return -1;
    }

    //Called by MatrixMathmatics functions inverse, subract
    public Matrix multiplyByConstant(double constant) {
        Matrix matrix = new Matrix(rows, column);
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < column; j++) {
            	matrix.setValueAt(i, j, data[i][j] * constant);
            }
        }
        return matrix;
    }
    
    /*public Matrix insertColumnWithValue1() {
        Matrix newMat = new Matrix(this.getRows(), this.getColumn()+1);
        for (int i=0;i<newMat.getRows();i++) {
            for (int j=0;j<newMat.getColumn();j++) {
                if (j==0)
                	newMat.setValueAt(i, j, 1.0);
                else 
                	newMat.setValueAt(i, j, this.getValueAt(i, j-1));

            }
        }
        return newMat;
    }*/
}

class MatrixOperations {

    private MatrixOperations(){}

    public static Matrix transpose(Matrix matrix) {
        Matrix transposedMatrix = new Matrix(matrix.getColumn(), matrix.getRows());
        for (int i=0;i<matrix.getRows();i++) {
            for (int j=0;j<matrix.getColumn();j++) {
                transposedMatrix.setValueAt(j, i, matrix.getValueAt(i, j));
            }
        }
        return transposedMatrix;
    }

    public static Matrix inverse(Matrix matrix){
        if(matrix.size() == 1){
             double[][] m = new double[1][1];
             double[][] getMat = matrix.getValues();
             double value = 1/getMat[0][0];
             m[0][0] = value;
             Matrix mObj = new Matrix(m);
             return mObj;
        }
        return (transpose(cofactor(matrix)).multiplyByConstant(1.0/determinant(matrix)));
    }

    public static double determinant(Matrix matrix){
        if (!matrix.isSquare())
        {}
        if (matrix.size() == 1){
            return matrix.getValueAt(0, 0);
        }

        if (matrix.size()==2) {
            return (matrix.getValueAt(0, 0) * matrix.getValueAt(1, 1)) - ( matrix.getValueAt(0, 1) * matrix.getValueAt(1, 0));
        }
        double sum = 0.0;
        for (int i=0; i<matrix.getColumn(); i++) {
            sum += changeSign(i) * matrix.getValueAt(0, i) * determinant(createSubMatrix(matrix, 0, i));
        }
        return sum;
    }

    private static int changeSign(int i) {
        if (i%2==0)
            return 1;
        return -1;
    }

    public static Matrix createSubMatrix(Matrix matrix, int excluding_row, int excluding_col) {
        Matrix mat = new Matrix(matrix.getRows()-1, matrix.getColumn()-1);
        int r = -1;
        for (int i=0;i<matrix.getRows();i++) {
            if (i==excluding_row)
                continue;
                r++;
                int c = -1;
            for (int j=0;j<matrix.getColumn();j++) {
                if (j==excluding_col)
                    continue;
                mat.setValueAt(r, ++c, matrix.getValueAt(i, j));
            }
        }
        return mat;
    }

    public static Matrix cofactor(Matrix matrix) {
        Matrix mat = new Matrix(matrix.getRows(), matrix.getColumn());
        for (int i=0;i<matrix.getRows();i++) {
            for (int j=0; j<matrix.getColumn();j++) {
                mat.setValueAt(i, j, changeSign(i) * changeSign(j) * determinant(createSubMatrix(matrix, i, j)));
            }
        }

        return mat;
    }

    public static Matrix add(Matrix matrix1, Matrix matrix2){
        if (matrix1.getColumn() != matrix2.getColumn() || matrix1.getRows() != matrix2.getRows())
        {}
        Matrix sumMatrix = new Matrix(matrix1.getRows(), matrix1.getColumn());
        for (int i=0; i<matrix1.getRows();i++) {
            for (int j=0;j<matrix1.getColumn();j++) 
                sumMatrix.setValueAt(i, j, matrix1.getValueAt(i, j) + matrix2.getValueAt(i,j));

        }
        return sumMatrix;
    }

    public static Matrix subtract(Matrix matrix1, Matrix matrix2) {
        return add(matrix1,matrix2.multiplyByConstant(-1));
    }

    public static Matrix multiply(Matrix matrix1, Matrix matrix2)  {
        Matrix multipliedMatrix = new Matrix(matrix1.getRows(), matrix2.getColumn());

        for (int i=0;i<multipliedMatrix.getRows();i++) {
            for (int j=0;j<multipliedMatrix.getColumn();j++) {
                double sum = 0.0;
                for (int k=0;k<matrix1.getColumn();k++) {
                    sum += matrix1.getValueAt(i, k) * matrix2.getValueAt(k, j);
                }
                multipliedMatrix.setValueAt(i, j, sum);
            }
        }
        return multipliedMatrix;
    }
}


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------

Problem 6 (level 3 part 3)


The Grandest Staircase Of Them All
==================================

With her LAMBCHOP doomsday device finished, Commander Lambda is preparing for her debut
 on the galactic stage - but in order to make a grand entrance, she needs a grand 
 staircase! As her personal assistant, you've been tasked with figuring out how 
 to build the best staircase EVER. 

Lambda has given you an overview of the types of bricks available, plus a budget.
 You can buy different amounts of the different types of bricks 
 (for example, 3 little pink bricks, or 5 blue lace bricks). Commander Lambda wants 
 to know how many different types of staircases can be built with each amount of bricks, 
 so she can pick the one with the most options. 

Each type of staircase should consist of 2 or more steps.  No two steps are allowed to be 
at the same height - each step must be lower than the previous one. All steps must contain 
at least one brick. A step's height is classified as the total amount of bricks that make up that step.

For example, when N = 3, you have only 1 choice of how to build the staircase, with the first 
step having a height of 2 and the second step having a height of 1: (# indicates a brick)

#
##
21

When N = 4, you still only have 1 staircase choice:

#
#
##
31
 
But when N = 5, there are two ways you can build a staircase from the given bricks.
The two staircases can have heights (4, 1) or (3, 2), as shown below:

#
#
#
##
41

#
##
##
32

Write a function called answer(n) that takes a positive integer n and
returns the number of different staircases that can be built from exactly n bricks.
n will always be at least 3 (so you can have a staircase at all), but no more than 200,
because Commander Lambda's not made of money!

Languages
=========

To provide a Python solution, edit solution.py
To provide a Java solution, edit solution.java

Test cases
==========

Inputs:
    (int) n = 3
Output:
    (int) 1

Inputs:
    (int) n = 200
Output:
    (int) 487067745

-------------------------------------------------------------------------------------------------------------------------------

Solution.java
-------------------------------------------------------------------------------------------------------------------------------

package com.complex.challenges;

import java.util.Arrays;

public class Answer6 {

	public static void main(String[] args) {
		//System.out.println(answer(5));
		System.out.println(answer(6));
		System.out.println(answer(200));

	}
	
	public static int answer(int n){
		int heightCount = 0;
	    int[][] stepArr = new int[n][n];
	    
	    for(int[] element : stepArr) {
	    	Arrays.fill(element,-1);
	    } 
	    	  
	    for(int i=(int)Math.floor(Math.sqrt(n*2)); i<=n-1; i++) {
	    	   heightCount+=stepCalc(n-i, i, stepArr);
	    }
	    
		return heightCount;
	}
	
	 public static int stepCalc(int side, int last,int[][] stepArr)
	    {
		 	int sum=0;
		 	
		 	if(side==0||last==1) {
	        	return 0;
	        }
	        	
	        if(stepArr[side][last]!=-1) {
	        	return stepArr[side][last];
	        } 
	        		        
	        if(last>side) {
	        	sum++;
	        } 
	        
	       for(int i=(int)Math.floor(Math.sqrt(side*2)); i<=side-1; i++)
	       {
	           if(i>=last) 
	        	   break;
	           sum+=stepCalc(side-i,i,stepArr);
	       }
	       
	       stepArr[side][last]=sum;
	       return sum;
	    }

}

-------------------------------------------------------------------------------------------------------------------------------




-------------------------------------------------------------------------------------------------------------------------------
Problem 7
-------------------------------------------------------------------------------------------------------------------------------
Free the Bunny Prisoners
========================

You need to free the bunny prisoners before Commander Lambda's space station explodes! 
Unfortunately, the commander was very careful with her highest-value prisoners - 
they're all held in separate, maximum-security cells. The cells are opened by putting keys
 into each console, then pressing the open button on each console simultaneously. 
 When the open button is pressed, each key opens its corresponding lock on the cell. 
 So, the union of the keys in all of the consoles must be all of the keys. 
 The scheme may require multiple copies of one key given to different minions.

The consoles are far enough apart that a separate minion is needed for each one. 
Fortunately, you have already freed some bunnies to aid you - and even better, 
you were able to steal the keys while you were working as Commander Lambda's assistant. 
The problem is, you don't know which keys to use at which consoles. 
The consoles are programmed to know which keys each minion had, 
to prevent someone from just stealing all of the keys and using them blindly. 
There are signs by the consoles saying how many minions had some keys for the set of consoles. 
You suspect that Commander Lambda has a systematic way to decide which keys to give to 
each minion such that they could use the consoles.

You need to figure out the scheme that Commander Lambda used to distribute the keys. 
You know how many minions had keys, and how many consoles are by each cell.  
You know that Command Lambda wouldn't issue more keys than necessary 
(beyond what the key distribution scheme requires), and that you need as 
many bunnies with keys as there are consoles to open the cell.

Given the number of bunnies available and the number of locks required to 
open a cell, write a function answer(num_buns, num_required) which returns 
a specification of how to distribute the keys such that any num_required bunnies 
can open the locks, but no group of (num_required - 1) bunnies can.

Each lock is numbered starting from 0. The keys are numbered the same as the 
lock they open (so for a duplicate key, the number will repeat, since it opens the same lock). 
For a given bunny, the keys they get is represented as a sorted list of the numbers for the keys. 
To cover all of the bunnies, the final answer is represented by a sorted list of each individual 
bunny's list of keys.  Find the lexicographically least such key distribution - 
that is, the first bunny should have keys sequentially starting from 0.

num_buns will always be between 1 and 9, and num_required will always be between 0 and 9 (both inclusive).
  For example, if you had 3 bunnies and required only 1 of them to open the cell, 
  you would give each bunny the same key such that any of the 3 of them would be able to open it, like so:
[
  [0],
  [0],
  [0],
]

If you had 2 bunnies and required both of them to open the cell, they would receive different keys 
(otherwise they wouldn't both actually be required), and your answer would be as follows:
[
  [0],
  [1],
]

Finally, if you had 3 bunnies and required 2 of them to open the cell, 
then any 2 of the 3 bunnies should have all of the keys necessary to open 
the cell, but no single bunny would be able to do it.  Thus, the answer would be:
[
  [0, 1],
  [0, 2],
  [1, 2],
]

Languages
=========

To provide a Python solution, edit solution.py
To provide a Java solution, edit solution.java

Test cases
==========

Inputs:
    (int) num_buns = 2
    (int) num_required = 1
Output:
    (int) [[0], [0]]

Inputs:
    (int) num_buns = 5
    (int) num_required = 3
Output:
    (int) [[0, 1, 2, 3, 4, 5], [0, 1, 2, 6, 7, 8], [0, 3, 4, 6, 7, 9], [1, 3, 5, 6, 8, 9], [2, 4, 5, 7, 8, 9]]

Inputs:
    (int) num_buns = 4
    (int) num_required = 4
Output:
    (int) [[0], [1], [2], [3]]


-------------------------------------------------------------------------------------------------------------------------------


-------------------------------------------------------------------------------------------------------------------------------
Solution.java
-------------------------------------------------------------------------------------------------------------------------------

package extra;

import java.util.ArrayList;

public class A7_4 {

	public static void main(String[] args) {
		//int[][] res = answer(5, 3);
		//int[][] res = answer(3, 2);
		//int[][] res = answer(2, 2);
		//int[][] res = answer(3, 1);
		//int[][] res = answer(4, 4);
		//int[][] res = answer(1, 1);			//Checked  = 0
		int[][] res = answer(5,6);			//Checked  = 0,0
		//int[][] res = answer(3, 1);			//Checked  = 0,0,0
		//int[][] res = answer(4, 1);			//Checked  = 0
		//int[][] res = answer(5, 1);			//Checked  = 0
		
		for (int[] is : res) {
			for (int i : is) {
				System.out.println(i);
			}
		}
	}
	
	public static int[][] answer(int num_buns, int num_required){
		
		 if(num_buns == num_required){
			 return(equal(num_buns, num_required)); //When bunnies available == locks to be opened
		 }
		 else if(num_buns>num_required){
			 ArrayList<ArrayList<Integer>> listOLists = combination(num_buns, num_required);
			 ArrayList<ArrayList<Integer>> listOLists2 = new ArrayList<ArrayList<Integer>>();
			 
			 //Removing empty array from the list
			 for (ArrayList<Integer> arrayList : listOLists) {
				 if(arrayList.size()!=0)
					 listOLists2.add(arrayList);
			}
			 
			 //System.out.println(listOLists2);
			 
			 ArrayList<ArrayList<Integer>> minionList = new ArrayList<ArrayList<Integer>>(num_buns);
			 ArrayList<Integer> tempArr = new ArrayList<Integer>();
			 
			 for (int i = 0; i < num_buns; i++) {
					minionList.add(tempArr);
			}
			 //System.out.println(minionList);
			 	 
			 
			 int index = 0;
			 for (ArrayList<Integer> item : listOLists2) {
				for (Integer key : item) {
					if(index == 0){
						ArrayList<Integer> temp = new ArrayList<Integer>();
						temp.add(index);
						minionList.remove(key-1);
						minionList.add((key-1),temp);
					}
					else{
						ArrayList<Integer> temp = new ArrayList<Integer>();
						temp = new ArrayList<Integer>(minionList.get(key-1));
						minionList.remove(key-1);
						temp.add(index);					
						minionList.add((key-1),temp);
						//System.out.println(minionList);
					}
					
				}
				index++;
			 }
			 //System.out.println(minionList);
			 
			 		 
			 int size2 = minionList.get(0).size();
			 int[][] finalArr = new int[num_buns][size2];
			 //int size3 = minionList.get(0).get(1);
			 //System.out.println(size2+" "+size3);
			 
			 for (int i = 0; i < finalArr.length; i++) {
				for (int j = 0; j < size2; j++) {
					finalArr[i][j] = minionList.get(i).get(j);
				}
			}
			 return finalArr;
		 }
		 else{
			 int[][] finalArr = new int[0][0];
			 return finalArr;
		 }
	}
	
	static ArrayList<ArrayList<Integer>> accumulated2 = new  ArrayList<ArrayList<Integer>>();
	
	public static ArrayList<ArrayList<Integer>> combination(int q, int n){
		ArrayList<ArrayList<Integer>> answer = new ArrayList<ArrayList<Integer>>();
		int i = 1;
		
		while( i <= n){
			ArrayList<Integer> arr = new ArrayList<Integer>();
			arr.add(i);
	        answer.add(branches(q - n, i, q, arr)); 
	        i += 1;
		} 
		return accumulated2;
	}
	
	public static ArrayList<Integer> branches(int bunniesLeft, int currentBranch, int rabbitsLeft, ArrayList<Integer> items){
		ArrayList<Integer> accumulated = new  ArrayList<Integer>();
		
		if( bunniesLeft == 0){
			return items;
		}
			
		int i = 0;
		if(bunniesLeft > 0 && currentBranch <= rabbitsLeft) 
		{
			i = currentBranch + 1;
			int highestBranchValue = rabbitsLeft - bunniesLeft + 1;
			 while(i <= highestBranchValue){
				 ArrayList<Integer> nextArray = new ArrayList<Integer>(items);
				 nextArray.add(i);
				 ArrayList<Integer> nextArray2 = new ArrayList<Integer>();
				 nextArray2.addAll(branches(bunniesLeft - 1, i, rabbitsLeft, nextArray));
				 accumulated2.add(nextArray2);
				 i += 1;
			 } 
		}
		return accumulated;
	}

	public static int[][] equal(int num_buns, int num_required){
		int[][] res = null;
		 
		res = new int[1][num_required];
		int counter = 0;
		for (int r=0; r<res.length; r++) {
		    for (int c=0; c<res[r].length; c++) {
		        res[r][c] = counter++;
		    }
		}
		 return res;
	}
}


-------------------------------------------------------------------------------------------------------------------------------
Output: Exception type: java.lang.IndexOutOfBoundsException in the online compiler
No error in eclipse

https://repl.it/JWLx/47
-------------------------------------------------------------------------------------------------------------------------------

