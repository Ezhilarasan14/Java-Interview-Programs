Problem 1

---------------------------------------------------------------------------------------------------------------
Prison Labor Dodgers
====================

Commander Lambda is all about efficiency, including using her bunny prisoners for manual labor. 
But no one's been properly monitoring the labor shifts for a while, and they've gotten quite mixed up. 

You've been given the task of fixing them, but after you wrote up new shifts, you realized that some 

prisoners had been transferred to a different block and aren't available for their assigned shifts. 

And manually sorting through each shift list to compare against prisoner block lists will take forever - 

remember, Commander Lambda loves efficiency!

Given two almost identical lists of prisoner IDs x and y where one of the lists contains an additional ID, 

write a function answer(x, y) that compares the lists and returns the additional ID.

For example, given the lists x = [13, 5, 6, 2, 5] and y = [5, 2, 5, 13], the function answer(x, y) would 

return 6 because the list x contains the integer 6 and the list y doesn't. 

Given the lists x = [14, 27, 1, 4, 2, 50, 3, 1] and y = [2, 4, -4, 3, 1, 1, 14, 27, 50], 

the function answer(x, y) would return -4 because the list y contains the integer -4 and the list x doesn't.

In each test case, the lists x and y will always contain n non-unique integers where n is at least 1 

but never more than 99, and one of the lists will contain an additional unique integer which 

should be returned by the function.  The same n non-unique integers will be present on both lists, 

but they might appear in a different order, like in the examples above. Commander Lambda likes to keep 

her numbers short, so every prisoner ID will be between -1000 and 1000.

Languages
=========

To provide a Python solution, edit solution.py
To provide a Java solution, edit solution.java

Test cases
==========

Inputs:
    (int list) x = [13, 5, 6, 2, 5]
    (int list) y = [5, 2, 5, 13]
Output:
    (int) 6

Inputs:
    (int list) x = [14, 27, 1, 4, 2, 50, 3, 1]
    (int list) y = [2, 4, -4, 3, 1, 1, 14, 27, 50]
Output:
    (int) -4
	
	
	
--------------------------------------------------------------------------------------------
public static int answer(int[] a, int[] b){
		int diff = 0;
	    for (int i = 0; i < a.length; i++) {
	        diff ^= a[i];
	    }
	    for (int i = 0; i < b.length; i++) {
	        diff ^= b[i];
	    }
	    return diff;
	}
	
Explanation:

Inputs:
    (int list) x = [13, 5, 6, 2, 5]
    (int list) y = [5, 2, 5, 13]
Output:

	for (int i = 0; i < a.length; i++) {
	        ret ^= a[i];
	    }
		
		ret = ret^a[i];
		i=0 -- ret=0 --  a[i]=12 so ret = 12
		i=1 -- ret=12 -- a[i]=5  so ret = 8
		i=2 -- ret=8 --  a[i]=6  so ret = 14
		i=3 -- ret=14 -- a[i]=2  so ret = 12
		i=4 -- ret=12 -- a[i]=5  so ret = 9
		
	for (int i = 0; i < b.length; i++) {
	        ret ^= b[i];
	}
	
		ret = ret^b[i];
		i=0 -- ret=9 --  b[i]=5 so ret = 12
		i=1 -- ret=12 -- b[i]=2  so ret = 14
		i=2 -- ret=14 --  b[i]=5  so ret = 11
		i=3 -- ret=11 -- b[i]=13  so ret = 6
		
------------------------------------------------------------------------------------------------------------

Solution.java
----------------------------------------------------------------------------------------------------------

package com.google.challenges;


public class Answer1 {
	
	public static int answer(int[] a, int[] b){
		int diff = 0;
	    for (int i = 0; i < a.length; i++) {
	        diff ^= a[i];
	    }
	    for (int i = 0; i < b.length; i++) {
	        diff ^= b[i];
	    }
	    return diff;
	}

	public static void main(String[] args) {
		int[] x = {13, 5, 6, 2, 5};
		int[] y = {5, 2, 5, 13};
		
		//int[] x = {14, 27, 1, 4, 2, 50, 3, 1};
		//int[] y = {2, 4, -4, 3, 1, 1, 14, 27, 50};
		
		
		
		System.out.println(answer(x, y));
	}

}

-----------------------------------------------------------------------------------------------------------------
















Problem 2

---------------------------------------------------------------------------------------------------

Please Pass the Coded Messages
==============================

You need to pass a message to the bunny prisoners, but to avoid detection, the code you agreed to use is... 
obscure, to say the least. The bunnies are given food on standard-issue prison plates that are stamped 
with the numbers 0-9 for easier sorting, and you need to combine sets of plates to create the numbers 
in the code. The signal that a number is part of the code is that it is divisible by 3. 

You can do smaller numbers like 15 and 45 easily, but bigger numbers like 144 and 414 
are a little trickier. Write a program to help yourself quickly create large numbers for 
use in the code, given a limited number of plates to work with.

You have L, a list containing some digits (0 to 9). 
Write a function answer(L) which finds the largest number that can be made 
from some or all of these digits and is divisible by 3. If it is not possible 
to make such a number, return 0 as the answer. L will contain anywhere from 1 to 9 digits.  
The same digit may appear multiple times in the list, but each element in the list may only be used once.

Languages
=========

To provide a Python solution, edit solution.py
To provide a Java solution, edit solution.java

Test cases
==========

Inputs:
    (int list) l = [3, 1, 4, 1]
Output:
    (int) 4311

Inputs:
    (int list) l = [3, 1, 4, 1, 5, 9]
Output:
    (int) 94311

---------------------------------------------------------------------------------------------------

Solution.java

---------------------------------------------------------------------------------------------------
package com.google.challenges;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class NumberGen {
	
	public static void main(String[] args) {
		//int[] l = {3, 1, 4, 1, 5, 9};
		int[] l = {3, 1, 4, 1};
		//int[] l = {7, 1, 2, 5};
		
		System.out.println(answer(l));
	}
	
	@SuppressWarnings("rawtypes")
	public static int answer(int[] l){
		
		Arrays.sort(l);
		
		for(int i=0;i<l.length/2;i++) {
		 
		     int temp1 = l[i];
		     l[i] = l[l.length-(i+1)];
		     l[l.length-(i+1)] = temp1;
		}
		
		/*System.out.println("Printing array l");
		for(int i=0;i<l.length; i++)
	    System.out.print(l[i]+" ");*/
		
		
		List<Integer> s = new ArrayList<Integer>();
	    for (Integer integer : l) {
			s.add(integer);
		}
		
	    int setSize = s.size();
	    int finalValue = (int) (Math.pow(2, setSize));
	    String bValue = "";
	    String temp1="";
	    List list = new ArrayList();
	    
	    for (int i = 1; i < finalValue; i++) {
	        bValue = Integer.toBinaryString(i);
	        int bValueSize = bValue.length();
	        
	        for (int k = 0; k < (setSize - bValueSize); k++) {
	            bValue = "0" + bValue;
	        }
	        

	        for (int j = 0; j < setSize; j++) {
	            if (bValue.charAt(j) == '1') {
	                temp1=temp1+s.get(j);
	            }
	        }
	        
	        if(Integer.parseInt(temp1)%3 == 0){
	        	list.add(Integer.parseInt(temp1));
	        }
	        temp1="";
	    }
	   
	    /*
	   System.out.println("Printing divisble by 3 list");
        for (Object obj : list) {
			System.out.println(obj);
		}
        
        System.out.println("max "+Collections.max(list));*/
	    if(list.size() == 0){
	    	return 0;
	    }else{
	    	return (int) Collections.max(list);
	    }	
	}
}
----------------------------------------------------------------------------------------------------






Problem 3 (lvl2 part2)

----------------------------------------------------------------------------------------------------
Don't Get Volunteered!
======================

As a henchman on Commander Lambda's space station, you're expected to be resourceful, 
smart, and a quick thinker. It's not easy building a doomsday device and capturing 
bunnies at the same time, after all! In order to make sure that everyone working for 
her is sufficiently quick-witted, Commander Lambda has installed new flooring outside 
the henchman dormitories. It looks like a chessboard, and every morning and evening 
you have to solve a new movement puzzle in order to cross the floor. That would be 
fine if you got to be the rook or the queen, but instead, you have to be the knight.
 Worse, if you take too much time solving the puzzle, you get "volunteered" as a test
 subject for the LAMBCHOP doomsday device!

To help yourself get to and from your bunk every day, write a function called 
answer(src, dest) which takes in two parameters: the source square, on which you start, 
and the destination square, which is where you need to land to solve the puzzle.  
The function should return an integer representing the smallest number of moves it 
will take for you to travel from the source square to the destination square using 
a chess knight's moves (that is, two squares in any direction immediately followed 
by one square perpendicular to that direction, or vice versa, in an "L" shape).  
Both the source and destination squares will be an integer between 0 and 63, 
inclusive, and are numbered like the example chessboard below:

-------------------------
| 0| 1| 2| 3| 4| 5| 6| 7|
-------------------------
| 8| 9|10|11|12|13|14|15|
-------------------------
|16|17|18|19|20|21|22|23|
-------------------------
|24|25|26|27|28|29|30|31|
-------------------------
|32|33|34|35|36|37|38|39|
-------------------------
|40|41|42|43|44|45|46|47|
-------------------------
|48|49|50|51|52|53|54|55|
-------------------------
|56|57|58|59|60|61|62|63|
-------------------------

Languages
=========

To provide a Python solution, edit solution.py
To provide a Java solution, edit solution.java

Test cases
==========

Inputs:
    (int) src = 19
    (int) dest = 36
Output:
    (int) 1

Inputs:
    (int) src = 0
    (int) dest = 1
Output:
    (int) 3
---------------------------------------------------------------------------------------------------


Solution.java

--------------------------------------------------------------------------------------------------
package com.google.challenges;


import java.util.LinkedList;
import java.util.Queue;

public class Answer3 {
	
	private static final int BLANK = -1;
	private static int rowLen;
	private static int colLen;
	private int[][] board;
	private static Queue<Coordinate> queue;

	public static void main(String[] args) {
			
		
		
		System.out.println(moveKnight(19, 36));
		System.out.println(moveKnight(0, 0));
		System.out.println(moveKnight(36, 50));

	}
	
	public static int moveKnight(int src, int dest){
		if(src == 0 && dest == 0 ){
			return 0;
		}else if(src == dest){
			return 0;
		} 
		else if (src-dest == 15|| src-dest == -15|| src-dest == 17|| src-dest == -17|| src-dest == -10||
				src-dest == -10||src-dest == 6||src-dest == -6){
			return 1;
		} else{
			int[][] board = 
				  { { -1, -1, -1, -1, -1, -1, -1, -1 },
					{ -1, -1, -1, -1, -1, -1, -1, -1 },
					{ -1, -1, -1, -1, -1, -1, -1, -1 },
					{ -1, -1, -1, -1, -1, -1, -1, -1 },

					{ -1, -1, -1, -1, -1, -1, -1, -1 },
					{ -1, -1, -1, -1, -1, -1, -1, -1 },
					{ -1, -1, -1, -1, -1, -1, -1, -1 },
					{ -1, -1, -1, -1, -1, -1, -1, -1 } };

			rowLen = board.length;
			colLen = board[0].length;
			//int hops=	path(board, 0, 0,rowLen -1 ,colLen -1 );
			
			
			//Generating the Actual board
			int [][] actualBoard = new int[8][8];
			int value=0;
			
			for(int i=0; i<8; i++){
				for(int j=0; j<8; j++){
					actualBoard[i][j] = value;
					value++;
				}
			}
		
			int startX = -1, startY = -1, endX = -1, endY = -1;
			for(int i=0; i<8; i++){
				for(int j=0; j<8; j++){
					if(src == actualBoard[i][j]){
						startX=i;
						startY=j;
					}else if(dest == actualBoard[i][j]) {
						endX=i;
						endY=j;
					}
				}
			}
			
			int hops = path(board, startX, startY, endX, endY );
			return hops;
		}
	}
	
	public static int path(int[][] board, int startRow, int startCol, int endRow, int endCol) {
		queue = new LinkedList<Coordinate>();
		queue.add(new Coordinate(startRow, startCol));
		queue.add(null);  //this acts a delimiter
		board[startRow][startCol] = 0;
		int hops=0;

		while (!queue.isEmpty()) {
			Coordinate popedItem = queue.poll();

			if (popedItem == null) {
				hops++;
				queue.offer(null);
				continue;
			} 
			
				int r = popedItem.row;
				int c = popedItem.col;

				board[r][c] = hops;
				
				if(r==endRow && c==endCol)
				{
					return hops;
				}

				Coordinate[] points = validCoordinates(board, r, c);

				for (Coordinate o : points) {
					if (o != null)
						queue.add(o);
				}
		}
		return -1;
	}

	private static boolean isValid(int[][] board, int row, int col) {
		if (row >= 0 && row < colLen && col >= 0 && col < rowLen
				&& board[row][col] == BLANK)
			return true;
		return false;
	}

	public static Coordinate[] validCoordinates(int[][] board, int row, int col) {
		Coordinate[] points = new Coordinate[8];

		if (isValid(board, row + 2, col + 1))
			points[0] = new Coordinate(row + 2, col + 1);

		if (isValid(board, row + 1, col + 2))
			points[1] = new Coordinate(row + 1, col + 2);

		if (isValid(board, row - 1, col + 2))
			points[2] = new Coordinate(row - 1, col + 2);

		if (isValid(board, row - 2, col + 1))
			points[3] = new Coordinate(row - 2, col + 1);

		if (isValid(board, row - 2, col - 1))
			points[4] = new Coordinate(row - 2, col - 1);

		if (isValid(board, row - 1, col - 2))
			points[5] = new Coordinate(row - 1, col - 2);

		if (isValid(board, row + 1, col - 2))
			points[6] = new Coordinate(row + 1, col - 2);

		if (isValid(board, row + 2, col - 1))
			points[7] = new Coordinate(row + 2, col - 1);

		return points;
	}
}

class Coordinate implements Comparable<Coordinate> {

	public int row;
	public int col;
	public int level;

	public Coordinate() {
		row = 0;
		col = 0;
	}

	public Coordinate(int row, int col) {
		this.row = row;
		this.col = col;
		this.level = level;

	}
	@Override
	public int compareTo(Coordinate that) {
		return this.row - that.row - this.col - that.col;
	}
}

--------------------------------------------------------------------------------------------------